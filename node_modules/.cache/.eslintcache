[{"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/index.js":"1","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/App.js":"2","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/reportWebVitals.js":"3","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/components/login-component.js":"4","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/components/mise-component.js":"5","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/components/table-component.js":"6","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/components/score-component.js":"7","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/models/action.js":"8","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/models/mise.js":"9","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/models/partie.js":"10","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/models/paquet.js":"11","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/tests/tests.js":"12","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/tests/test-component.js":"13","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/models/carte.js":"14","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/components/cartes-component.js":"15","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/components/joueur-component.js":"16","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/components/main-component.js":"17","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/models/joueur.js":"18","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/models/meilleure-carte.js":"19","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/tests/test-joueur.js":"20","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/tests/test-carte.js":"21","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/tests/test-meilleure-carte/test-meilleure-carte.js":"22","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/components/carte-component.js":"23","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/tests/test-meilleure-carte/test-get-main1-carte1.js":"24","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/tests/test-meilleure-carte/test-getCarte4.js":"25","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/tests/test-meilleure-carte/test-isCarteMaitre.js":"26"},{"size":535,"mtime":1671192139372,"results":"27","hashOfConfig":"28"},{"size":8976,"mtime":1671192139370,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":1671192139372,"results":"30","hashOfConfig":"28"},{"size":3425,"mtime":1671192139371,"results":"31","hashOfConfig":"28"},{"size":3758,"mtime":1671192139372,"results":"32","hashOfConfig":"28"},{"size":4103,"mtime":1671192139372,"results":"33","hashOfConfig":"28"},{"size":1353,"mtime":1671192139372,"results":"34","hashOfConfig":"28"},{"size":4986,"mtime":1671192139372,"results":"35","hashOfConfig":"28"},{"size":717,"mtime":1671192139372,"results":"36","hashOfConfig":"28"},{"size":1281,"mtime":1671192139372,"results":"37","hashOfConfig":"28"},{"size":9849,"mtime":1671192139372,"results":"38","hashOfConfig":"28"},{"size":830,"mtime":1671192139373,"results":"39","hashOfConfig":"28"},{"size":1291,"mtime":1671192139373,"results":"40","hashOfConfig":"28"},{"size":5082,"mtime":1671192139372,"results":"41","hashOfConfig":"28"},{"size":1920,"mtime":1671192139371,"results":"42","hashOfConfig":"28"},{"size":1315,"mtime":1671192139371,"results":"43","hashOfConfig":"28"},{"size":1427,"mtime":1671192139372,"results":"44","hashOfConfig":"28"},{"size":1994,"mtime":1671192139372,"results":"45","hashOfConfig":"28"},{"size":7343,"mtime":1671192139372,"results":"46","hashOfConfig":"28"},{"size":2361,"mtime":1671192139373,"results":"47","hashOfConfig":"28"},{"size":12274,"mtime":1671192139373,"results":"48","hashOfConfig":"28"},{"size":460,"mtime":1671192139373,"results":"49","hashOfConfig":"28"},{"size":2362,"mtime":1671192139371,"results":"50","hashOfConfig":"28"},{"size":6716,"mtime":1671192139373,"results":"51","hashOfConfig":"28"},{"size":1195,"mtime":1671192139373,"results":"52","hashOfConfig":"28"},{"size":5525,"mtime":1671192139373,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"o8ey55",{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/index.js",[],[],"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/App.js",[],[],"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/reportWebVitals.js",[],[],"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/components/login-component.js",[],[],"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/components/mise-component.js",[],[],"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/components/table-component.js",[],[],"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/components/score-component.js",[],[],"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/models/action.js",[],[],"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/models/mise.js",[],[],"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/models/partie.js",[],[],"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/models/paquet.js",["136"],[],"import { ActionType } from \"./action\";\nimport { Carte, Sorte, Symbole } from \"./carte\";\nimport { Joueur } from \"./joueur\";\nimport { MeilleureCarte } from \"./meilleure-carte\";\n\nexport class Paquet {\n    constructor(avecQuettee) {\n        this.cartes = [];\n        let rang = 0;\n        for (let sorte of [Sorte.COEUR, Sorte.PIQUE, Sorte.CARREAU, Sorte.TREFLE]) {\n            let poids = 7;\n            for (let symbole of [Symbole.SEPT, Symbole.HUIT, Symbole.NEUF, Symbole.DIX, Symbole.JACK, Symbole.DAME, Symbole.ROI, Symbole.AS]) {\n                this.cartes.push(new Carte(rang++, sorte, symbole, poids++));\n            }\n        }\n\n        this.quettee = null;\n        if (avecQuettee) {\n            this.quettee = [];\n            this.cartes.push(new Carte(rang++, Sorte.JOKER, '', 15));\n            this.cartes.push(new Carte(rang, Sorte.BLANCHE, '', 16));\n        }\n\n        this.joueur1 = new Joueur('Gilberte', 0, 'Georgette');\n        this.joueur2 = new Joueur('Xavier', 1, 'Alexis');\n        this.joueur3 = new Joueur('Georgette', 2, 'Gilberte');\n        this.joueur4 = new Joueur('Alexis', 3, 'Xavier');\n\n        this.joueurs = [this.joueur1, this.joueur2, this.joueur3, this.joueur4];\n\n        this.sorteDemandee = null;\n\n        this.clearMain();\n\n        this.pile = [];\n\n        this.attendre = false;\n\n        this.points = [0, 0];\n\n        this.brasser();\n    }\n\n    setJoueurActif(joueurActif) {\n        for (let joueur of this.joueurs) {\n            if (joueur.getNom() === joueurActif.getNom()) {\n                joueur.actif = true;\n            } else {\n                joueur.actif = false;\n            }\n        }\n    }\n\n    getCartes() {\n        return this.cartes;\n    }\n\n    getJoueur1() {\n        return this.joueur1;\n    }\n\n    getJoueur2() {\n        return this.joueur2;\n    }\n\n    getJoueur3() {\n        return this.joueur3;\n    }\n\n    getJoueur4() {\n        return this.joueur4;\n    }\n\n    getJoueurs() {\n        return this.joueurs.map((item) => item.getNom());\n    }\n\n    getQuettee() {\n        return this.quettee;\n    }\n\n    getNextJoueur(joueur) {\n        let idx = joueur.getIndex() + 1;\n        if (idx >= 4) {\n            idx = 0;\n        }\n        return this.getJoueurParIdx(idx);\n    }\n\n    clearMain() {\n        this.main = [new Carte(), new Carte(), new Carte(), new Carte()];\n        this.sorteDemandee = null;\n    }\n\n    prendreQuettee(mise) {\n        const joueur = this.getJoueurParNom(mise.joueur);\n        if (joueur !== null) {\n            const carte1 = this.quettee[0];\n            const carte2 = this.quettee[1];\n            carte1.surelevee = true;\n            carte2.surelevee = true;\n            joueur.cartes.push(carte1);\n            joueur.cartes.push(carte2);\n            joueur.cartes.sort((a, b) => a.rang - b.rang);\n            this.quettee = [];\n        }\n    }\n\n    getJoueurParNom(nom) {\n        return this.joueurs.find((item) => item.getNom() === nom);\n    }\n\n    getJoueurParIdx(idx) {\n        return this.joueurs.find((item) => item.getIndex() === idx);\n    }\n\n    brasser() {\n        // Remet les bibittes dans l'ordre initial        \n        const joker = this.cartes.find(carte => carte.sorte === Sorte.JOKER);\n        joker.rang = 32;\n        const blanche = this.cartes.find(carte => carte.sorte === Sorte.BLANCHE);\n        blanche.rang = 33;\n        for (let i = this.cartes.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * i);\n            const temp = this.cartes[i];\n            this.cartes[i] = this.cartes[j];\n            this.cartes[j] = temp;\n        }\n        this.joueur1.cartes = this.cartes.slice(0, 8).sort((a, b) => a.rang - b.rang);\n        this.joueur2.cartes = this.cartes.slice(8, 16).sort((a, b) => a.rang - b.rang);\n        this.joueur3.cartes = this.cartes.slice(16, 24).sort((a, b) => a.rang - b.rang);\n        this.joueur4.cartes = this.cartes.slice(24, 32).sort((a, b) => a.rang - b.rang);\n\n        if (this.quettee !== null) {\n            this.quettee = this.cartes.slice(32, 34).sort((a, b) => a.rang - b.rang);\n        }\n\n        this.points = [0, 0];\n\n        for (let joueur of this.joueurs) {\n            joueur.resetRefuseSorte();\n        }\n    }\n\n    cliqueCarte(carte, joueur, action, atout) {\n        if (joueur !== null) {\n            switch (action.type) {\n                case ActionType.PASSER: {\n                    const partenaire = this.getJoueurParNom(joueur.partenaire);\n                    const copie = carte.copy();\n                    copie.surelevee = true;\n                    partenaire.cartes.push(copie);\n                    partenaire.cartes.sort((a, b) => a.rang - b.rang);\n                    const idx = joueur.cartes.findIndex((item) => item.key === carte.key);\n                    joueur.cartes.splice(idx, 1);\n                    return;\n                }\n                case ActionType.DISCARTER: {\n                    const idx = joueur.cartes.findIndex((item) => item.key === carte.key);\n                    joueur.cartes.splice(idx, 1);\n                    return;\n                }\n                case ActionType.JOUER: {\n                    const joueurIdx = joueur.getIndex();\n                    this.main[joueurIdx] = carte.copy();\n                    this.pile.push(carte);\n                    joueur.setRefuseSorte(this.sorteDemandee, carte, atout);\n                    const idx = joueur.cartes.findIndex((item) => item.key === carte.key);\n                    joueur.cartes.splice(idx, 1);\n                    return;\n                }\n                default: {\n                    return;\n                }\n            }\n        }\n    }\n\n    getCarteLead(atout, petite) {\n        let carteGagnante = this.main[0];\n        let remporteur = this.joueur1;\n        for (let i = 1; i < 4; ++i) {\n            let carte = this.main[i];\n            if (carte.isAtout(atout) && !carteGagnante.isAtout(atout)) {\n                carteGagnante = carte;\n                remporteur = this.getJoueurParIdx(i);\n            } else if (carte.sorte === this.sorteDemandee && carteGagnante.sorte !== this.sorteDemandee && !carteGagnante.isAtout(atout)) {\n                carteGagnante = carte;\n                remporteur = this.getJoueurParIdx(i);\n            } else if (carte.sorte === carteGagnante.sorte || (carte.isAtout(atout) && carteGagnante.isAtout(atout))) {\n                if (petite) {\n                    if (carte.rang < carteGagnante.rang) {\n                        carteGagnante = carte;\n                        remporteur = this.getJoueurParIdx(i);\n                    }\n                } else {\n                    if (carte.rang > carteGagnante.rang) {\n                        carteGagnante = carte;\n                        remporteur = this.getJoueurParIdx(i);\n                    }\n                }\n            }\n        }\n        let points = 0;\n        for (let carte of this.main) {\n            points += carte.points;\n        }\n        return { carte: carteGagnante, joueur: remporteur, points: points };\n    }\n\n    getRemporteur(mise, mainDeTable) {\n        const lead = this.getCarteLead(mise.atout, mise.petite);\n\n        this.points[lead.joueur.equipeIdx] += lead.points;\n        if (mainDeTable) {\n            this.points[lead.joueur.equipeIdx] += 10;\n        }\n        return lead.joueur;\n    }\n\n    trierBibittes(mise) {\n        let rang1 = -1;\n\n        switch (mise.atout) {\n            case Sorte.COEUR: {\n                rang1 = 7;\n                break;\n            }\n            case Sorte.PIQUE: {\n                rang1 = 15;\n                break;\n            }\n            case Sorte.CARREAU: {\n                rang1 = 23;\n                break;\n            }\n            case Sorte.TREFLE: {\n                rang1 = 31;\n                break;\n            }\n            case Sorte.SANS_ATOUT: {\n                rang1 = 0;\n                break;\n            }\n            default: {\n                break;\n            }\n        }\n\n        const joker = this.cartes.find(carte => carte.sorte === Sorte.JOKER);\n        const blanche = this.cartes.find(carte => carte.sorte === Sorte.BLANCHE);\n\n        if (mise.sorte === Sorte.SANS_ATOUT) {\n            if (mise.petite) {\n                if (joker !== undefined) joker.rang = rang1 + 0.25;\n                if (blanche !== undefined) blanche.rang = rang1 + 0.75;\n            } else {\n                if (joker !== undefined) joker.rang = rang1 - 0.75;\n                if (blanche !== undefined) blanche.rang = rang1 - 0.25;\n            }\n        } else {\n            if (joker !== undefined) joker.rang = rang1 + 0.25;\n            if (blanche !== undefined) blanche.rang = rang1 + 0.75;\n        }\n        for (let joueur of this.joueurs) {\n            joueur.cartes.sort((a, b) => a.rang - b.rang);\n        }\n    }\n\n    getMeilleureCarte(action, atout, petite) {\n        const cartes = action.joueur.cartes;\n        const meilleureCarte = new MeilleureCarte();\n        // 1re main, 1re carte\n        if (action.cptCarte === 0 && action.cptJoueur === 0) {\n            return meilleureCarte.getMain1Carte1(cartes, atout, this.pile);\n        }\n        // 1re carte\n        // if (action.cptJoueur === 0) {\n        //     return meilleureCarte.getCarte1(cartes, atout, this.pile);\n        // }\n        // Dernière carte de la main\n        if (action.cptJoeur === 3) {\n            const lead = this.getCarteLead(atout, petite);\n            return meilleureCarte.getCarte4(this.sorteDemandee, cartes);\n        }\n        return cartes.find(c => !c.isDisabled(cartes, this.sorteDemandee, atout));\n    }\n\n    getCarte(poids, sorte) {\n        return this.cartes.find(c => c.sorte === sorte && c.poids === poids);\n    }\n\n    setSorteDemandee(carte, atout) {\n        if (carte.isAtout(atout)) {\n            this.sorteDemandee = atout;\n        } else {\n            this.sorteDemandee = carte.sorte;\n        }\n    }\n}","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/tests/tests.js",[],[],"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/tests/test-component.js",[],[],"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/models/carte.js",[],[],"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/components/cartes-component.js",[],[],"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/components/joueur-component.js",[],[],"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/components/main-component.js",[],[],"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/models/joueur.js",[],[],"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/models/meilleure-carte.js",["137","138","139"],[],"import { Carte, Sorte, Symbole } from \"./carte\";\n\nclass AsInfo {\n    constructor(as) {\n        this.as = as;\n        this.beu = null;\n        this.nSorte = 0;\n    }\n}\n\nclass ChienInfo {\n    constructor(chien, ratio) {\n        this.chien = chien;\n        this.ratio = ratio;\n    }\n}\n\nexport class MeilleureCarte {\n    constructor() {\n    }\n\n    piger(cartes, contrainte) {\n        if (cartes.length === 1) {\n            return cartes[0];\n        }\n        let choix = [];\n        switch (contrainte) {\n            case 'min': {\n                const minVal = Math.min(...cartes.map(c => c.poids));\n                choix = cartes.filter(c => c.poids === minVal);\n                break;\n            }\n            case 'max': {\n                const minVal = Math.max(...cartes.map(c => c.poids));\n                choix = cartes.filter(c => c.poids === minVal);\n                break;\n            }\n            default: {\n                choix = cartes;\n                break;\n            }\n        }\n        const idx = Math.floor(Math.random() * choix.length);\n        return cartes[idx];\n    }\n\n    getCarte4(sorteDemandee, atout, mesCartes) {\n        const cartes = mesCartes.filter(c => !c.isDisabled(mesCartes, sorteDemandee, atout));\n        \n        const pointSec = this.getPointSec(this.getCartesSeches(cartes, atout), 13);\n        if (pointSec !== null) {\n            return pointSec;\n        }\n        return cartes[0];\n    }\n\n    getMain1Carte1(mesCartes, atout, pile) {\n        const cartesAs = mesCartes.filter(c => c.symbole === Symbole.AS);\n        const cartesBeu = mesCartes.filter(c => c.symbole === Symbole.ROI)\n\n        // Cherche une pair beu-as (pas d'atout)\n        const asInfos = [];\n        for (let as of cartesAs) {\n            if (!as.isAtout(atout)) {\n                const asInfo = new AsInfo(as);\n                const beuMemeSorte = cartesBeu.find(c => c.sorte === as.sorte);\n                if (beuMemeSorte !== undefined) {\n                    asInfo.beu = beuMemeSorte;\n                }\n                asInfo.nSorte = mesCartes.filter(c => c.sorte === as.sorte).length;\n                asInfos.push(asInfo);\n            }\n        }\n        if (asInfos.length > 0){\n            const avecBeu = asInfos.filter(as => as.beu !== null);\n            if (avecBeu.length > 0) {\n                // Joue le beu accoté par un as qui a le plus faible nombre de cartes de cette sorte\n                const nMin = Math.min(...avecBeu.map(as => as.nSorte));\n                const avecBeuMin = avecBeu.filter(as => as.nSorte === nMin);\n                return this.piger(avecBeuMin.map(as => as.beu));\n            }\n            // Joue l'as qui a le plus faible nombre de cartes de cette sorte\n            const nMin = Math.min(...asInfos.map(as => as.nSorte));\n            const asMin = asInfos.filter(as => as.nSorte === nMin);\n            return this.piger(asMin.map(as => as.as));\n        }\n\n        // Cherche une carte sèche (sauf atout)\n        const cartesSeches = this.getCartesSeches(mesCartes, atout);\n        const chienSec = this.getChienSec(cartesSeches, atout);\n        if (chienSec !== null) {\n            // Priorise chien\n            return chienSec;\n        }\n        const pointSec = this.getPointSec(cartesSeches, 10);\n        if (pointSec !== null) {\n            // Priorise 10, ensuite beu\n            return pointSec;\n        }\n\n        // Cherche un chien\n        const chien = this.getMeilleurChien(mesCartes, atout,pile,[]);\n        if (chien !== null) {\n            return chien;\n        }\n\n        // Joue un 10 qui n'est pas de l'atout\n        const dix = mesCartes.filter(c => c.poids === 10 && !c.isAtout(atout));\n        if (dix.length > 0) {\n            return this.piger(dix);\n        }\n\n        // À ce stade-ci, il ne reste que de l'atout, jouer la plus forte\n        return mesCartes[mesCartes.length - 1];\n    }\n\n    getCarte1() {}\n\n    getCartesSeches(mesCartes, atout) {\n        return mesCartes.filter(c => c.isSeche(mesCartes, atout) && !c.isAtout(atout));\n    }\n\n    getChienSec(cartesSeches, atout) {\n        const chiensSecs = cartesSeches.filter(c => c.isChien(atout, true));\n        if (chiensSecs.length > 0) {\n            // Priorise les chiens\n            return this.piger(chiensSecs, 'min');\n        }\n        return null;\n    }\n\n    getDixSec(cartesSeches) {\n        const dixSecs = cartesSeches.filter(c => c.poids === 10);\n        if (dixSecs.length > 0) {\n            // Priorise 10\n            return this.piger(dixSecs);\n        }\n        return null;\n    }\n\n    getBeuSec(cartesSeches){\n    const beuxSecs = cartesSeches.filter(c => c.symbole === Symbole.ROI);\n        if (beuxSecs.length > 0) {\n            // Priorise beu\n            return this.piger(beuxSecs);\n        }\n        return null;\n    }\n\n    getMeilleurChien(mesCartes, atout, pile) {\n        let chiens = mesCartes.filter(c => c.isChien(atout, true));\n        \n        let ratios = [];\n        if (chiens.length > 0) {\n            // Priorise les chiens qui ont le meilleur ratio chien/point\n            for (let chien of chiens) {\n                const pointsSorte = mesCartes.filter(c => c.sorte === chien.sorte && c.points > 0);\n                let totPoints = 0;\n                for (let p of pointsSorte) {\n                    const maitre = this.isCarteMaitre(p, mesCartes, pile, atout);\n                    totPoints += p.points;\n                }\n                const chiensSorte = chiens.filter(c => c.sorte === chien.sorte);\n                const ratio = Number(chiensSorte.length)/totPoints;\n                ratios.push(new ChienInfo(chien, ratio));\n            }\n            const minRatio = Math.min(...ratios.map(r => r.ratio));\n            const chiensMinRatio = ratios.filter(r => r.ratio === minRatio);\n            return this.piger(chiensMinRatio.map(c => c.chien), 'min');\n        }\n        return null;\n    }\n\n    getPointSec(cartesSeches, priorite) {\n        const beuSec = this.getBeuSec(cartesSeches);\n        const dixSec = this.getDixSec(cartesSeches);\n\n        if (beuSec !== null && (priorite === 13 || dixSec === null)) {\n            return beuSec;\n        }\n\n        if (dixSec !== null) {\n            return dixSec;\n        }\n        return null;\n    }\n\n    /**\n     * Teste si la carte est maître\n     * @param carte: carte à tester\n     */\n    isCarteMaitre(carte, mesCartes, pile, atout) {\n        let cartesMeilleures = [];\n        for (let i = carte.poids + 1; i <= 14; ++i) {\n            const c = new Carte();\n            c.setFromPoids(i, carte.sorte);\n            cartesMeilleures.push(c);\n        }\n        if (carte.isAtout(atout)) {\n            if (!carte.isBlanche()) {\n                const c1 = new Carte();                \n                c1.setBlanche();\n                cartesMeilleures.push(c1);\n                if (!carte.isJoker()) {\n                    const c2 = new Carte();\n                    c2.setJoker();\n                    cartesMeilleures.push(c2);\n                }                \n            } \n        }\n        for (let mCarte of cartesMeilleures) {\n            const cPile = pile.find(c => c.key === mCarte.key);\n            const cMoi = mesCartes.find(c => c.key === mCarte.key);\n            if (cPile === undefined && cMoi === undefined) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/tests/test-joueur.js",[],[],"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/tests/test-carte.js",["140"],[],"import { Carte, Couleur, Sorte } from \"../models/carte\";\nimport { Paquet } from \"../models/paquet\";\n\nexport class TestCarte {\n    runAll() {\n        const isChienTest = new IsChien();\n        isChienTest.runAll();\n\n        const isSecheTest = new IsSeche();\n        isSecheTest.runAll();\n\n        const isAtout = new IsAtout();\n        isAtout.runAll();\n\n        const isSorteDemandee = new IsSorteDemandee();\n        isSorteDemandee.runAll();\n\n        const isDisabled = new IsDisabled();\n        isDisabled.runAll();\n\n        const setFromPoids = new SetFromPoids();\n        setFromPoids.runAll();\n    }\n}\n\n// Tester la méthode Carte.isChien(atout, dixPasse)\nexport class IsChien {\n    constructor() {\n        this.paquet = new Paquet(true);\n    }\n\n    runAll() {\n        this.bibitte();\n        this.bibitteSansAtout();\n        this.point();\n        this.as();\n        this.atout();\n        this.jackDame10PasPasse();\n        this.jackDame10Passe();\n    }\n\n    // Une bibitte n'est pas un chien\n    bibitte() {\n        const carte1 = this.paquet.getCarte(15, Sorte.JOKER);\n        const carte2 = this.paquet.getCarte(16, Sorte.BLANCHE);\n        const ok = !carte1.isChien(Sorte.PIQUE, true) && !carte2.isChien(Sorte.PIQUE, true);\n        console.log(`${ok}: TestCarte: IsChien: bibitte`);\n    }\n\n    // Une bibitte sans atout est un chien\n    bibitteSansAtout() {\n        const carte1 = this.paquet.getCarte(15, Sorte.JOKER);\n        const carte2 = this.paquet.getCarte(16, Sorte.BLANCHE);\n        const ok = carte1.isChien(Sorte.SANS_ATOUT, true) && carte2.isChien(Sorte.SANS_ATOUT, true);\n        console.log(`${ok}: TestCarte: IsChien: bibitteSansAtout`);\n    }\n\n    // Un point n'est pas un chien\n    point() {\n        const carte1 = this.paquet.getCarte(10, Sorte.PIQUE);\n        const carte2 = this.paquet.getCarte(13, Sorte.PIQUE);\n        const ok = !carte1.isChien(Sorte.COEUR, true) && !carte2.isChien(Sorte.COEUR, true);\n        console.log(`${ok}: TestCarte: IsChien: point`);\n    }\n\n    // Un as n'est pas un chien\n    as() {\n        const carte = this.paquet.getCarte(14, Sorte.PIQUE);\n        const ok = !carte.isChien(Sorte.COEUR, true);\n        console.log(`${ok}: TestCarte: IsChien: as`);\n    }\n\n    // Les 7, 8, 9 sont des chiens\n    septHuitNeuf() {\n        const carte1 = this.paquet.getCarte(7, Sorte.PIQUE);\n        const carte2 = this.paquet.getCarte(8, Sorte.PIQUE);\n        const carte3 = this.paquet.getCarte(9, Sorte.PIQUE);\n        const ok = !carte1.isChien(Sorte.COEUR, true) && !carte2.isChien(Sorte.COEUR, true) && !carte3.isChien(Sorte.COEUR, true);\n        console.log(`${ok}: TestCarte: IsChien: septHuitNeuf`);\n    }\n\n    // Un chien d'atout n'est plus un chien\n    atout() {\n        const carte = this.paquet.cartes.find(c => c.sorte === Sorte.PIQUE && c.poids === 7);\n        const ok = !carte.isChien(Sorte.PIQUE, true);\n        console.log(`${ok}: TestCarte: IsChien: atout`);\n    }\n\n    // Jack et Dame ne sont pas des chiens si le 10 n'est pas passé\n    jackDame10PasPasse() {\n        const carte1 = this.paquet.cartes.find(c => c.sorte === Sorte.PIQUE && c.poids === 11);\n        const carte2 = this.paquet.cartes.find(c => c.sorte === Sorte.PIQUE && c.poids === 12);\n        const ok = !carte1.isChien(Sorte.COEUR, false) && !carte2.isChien(Sorte.COEUR, false);\n        console.log(`${ok}: TestCarte: IsChien: jackDame10PasPasse`);\n    }\n\n    // Jack et Dame sont  des chiens si le 10 est passé\n    jackDame10Passe() {\n        const carte1 = this.paquet.cartes.find(c => c.sorte === Sorte.PIQUE && c.poids === 11);\n        const carte2 = this.paquet.cartes.find(c => c.sorte === Sorte.PIQUE && c.poids === 12);\n        const ok = carte1.isChien(Sorte.COEUR, true) && carte2.isChien(Sorte.COEUR, true);\n        console.log(`${ok}: TestCarte: IsChien: jackDame10Passe`);\n    }\n}\n\n// Tester la méthode Carte.isSeche(atout, dixPasse)\nexport class IsSeche {\n    constructor() {\n        this.paquet = new Paquet(true);\n    }\n\n    runAll() {\n        this.seche();\n        this.pasSeche();\n        this.pasSecheBibitte();\n    }\n\n    // Carte sèche\n    seche() {\n        const carte = this.paquet.getCarte(8, Sorte.PIQUE);\n        const cartes = [\n            this.paquet.getCarte(10, Sorte.COEUR),\n            this.paquet.getCarte(7, Sorte.COEUR),\n            this.paquet.getCarte(8, Sorte.PIQUE)\n        ];\n        const ok = carte.isSeche(cartes, Sorte.TREFLE);\n        console.log(`${ok}: TestCarte: IsSeche: seche`);\n    }\n\n    // Carte pas sèche\n    pasSeche() {\n        const carte = this.paquet.getCarte(8, Sorte.PIQUE);\n        const cartes = [\n            this.paquet.getCarte(10, Sorte.COEUR),\n            this.paquet.getCarte(7, Sorte.PIQUE),\n            this.paquet.getCarte(8, Sorte.PIQUE)\n        ];\n        const ok = !carte.isSeche(cartes, Sorte.TREFLE);\n        console.log(`${ok}: TestCarte: isSeche: pasSeche`);\n    }\n\n    // Pas sèche si atout en présence de bibittes\n    pasSecheBibitte() {\n        const carte = this.paquet.getCarte(8, Sorte.PIQUE);\n        const cartes = [\n            this.paquet.getCarte(10, Sorte.COEUR),\n            this.paquet.getCarte(8, Sorte.PIQUE),\n            this.paquet.getCarte(15, Sorte.JOKER)\n        ];\n        const ok = !carte.isSeche(cartes, Sorte.PIQUE);\n        console.log(`${ok}: TestCarte: IsSeche: pasSecheBibitte`);\n    }\n}\n\n// Tester la méthode Carte.isAtout(atout)\nexport class IsAtout {\n    constructor() {\n        this.paquet = new Paquet(true);\n    }\n\n    runAll() {\n        this.atout();\n        this.atoutBibitte();\n        this.pasAtout();\n        this.pasAtoutBibitte();\n        this.sansAtout();\n    }\n\n    // Carte d'atout\n    atout() {\n        const carte = this.paquet.getCarte(8, Sorte.PIQUE);\n\n        const ok = carte.isAtout(Sorte.PIQUE);\n        console.log(`${ok}: TestCarte: IsAtout: atout`);\n    }\n\n    // Carte pas d'atout\n    pasAtout() {\n        const carte = this.paquet.getCarte(8, Sorte.PIQUE);\n\n        const ok = !carte.isAtout(Sorte.TREFLE);\n        console.log(`${ok}: TestCarte: IsAtout: pasAtout`);\n    }\n\n    // Bibittes d'atout\n    atoutBibitte() {\n        const carte1 = this.paquet.getCarte(15, Sorte.JOKER);\n        const carte2 = this.paquet.getCarte(16, Sorte.BLANCHE);\n\n        const ok = carte1.isAtout(Sorte.PIQUE) && carte2.isAtout(Sorte.PIQUE);\n        console.log(`${ok}: TestCarte: IsAtout: atoutBibitte`);\n    }\n\n    // Bibittes sans atout\n    pasAtoutBibitte() {\n        const carte1 = this.paquet.getCarte(15, Sorte.JOKER);\n        const carte2 = this.paquet.getCarte(16, Sorte.BLANCHE);\n\n        const ok = !carte1.isAtout(Sorte.SANS_ATOUT) && !carte2.isAtout(Sorte.SANS_ATOUT);\n        console.log(`${ok}: TestCarte: IsAtout: pasAtoutBibitte`);\n    }\n\n    // Sans atout\n    sansAtout() {\n        const carte = this.paquet.getCarte(8, Sorte.PIQUE);\n\n        const ok = !carte.isAtout(Sorte.SANS_ATOUT);\n        console.log(`${ok}: TestCarte: IsAtout: sansAtout`);\n    }\n}\n\n// Tester la méthode Carte.isSorteDemandee(sorteDemandee, atout)\nexport class IsSorteDemandee {\n    constructor() {\n        this.paquet = new Paquet(true);\n    }\n\n    runAll() {\n        this.demandee();\n        this.pasDemandee();\n        this.atoutDemandeBibitte();\n    }\n\n    // Sorte demandee\n    demandee() {\n        const carte = this.paquet.getCarte(8, Sorte.PIQUE);\n\n        const ok = carte.isSorteDemandee(Sorte.PIQUE, Sorte.Pique);\n        console.log(`${ok}: TestCarte: IsSorteDemandee: demandee`);\n    }\n\n    // Pas sorte demandee\n    pasDemandee() {\n        const carte = this.paquet.getCarte(8, Sorte.PIQUE);\n\n        const ok = carte.isSorteDemandee(Sorte.PIQUE, Sorte.TREFLE);\n        console.log(`${ok}: TestCarte: IsSorteDemandee: pasDemandee`);\n    }\n\n    // Bibitte et atout demande\n    atoutDemandeBibitte() {\n        const carte1 = this.paquet.getCarte(15, Sorte.JOKER);\n        const carte2 = this.paquet.getCarte(16, Sorte.BLANCHE);\n\n        const ok = carte1.isSorteDemandee(Sorte.PIQUE, Sorte.PIQUE) && carte2.isSorteDemandee(Sorte.PIQUE, Sorte.PIQUE);\n        console.log(`${ok}: TestCarte: IsSorteDemandee: atoutDemandeBibitte`);\n    }\n\n    // Bibittes sans atout\n    pasAtoutBibitte() {\n        const carte1 = this.paquet.getCarte(15, Sorte.JOKER);\n        const carte2 = this.paquet.getCarte(16, Sorte.BLANCHE);\n\n        const ok = !carte1.isAtout(Sorte.SANS_ATOUT) && !carte2.isAtout(Sorte.SANS_ATOUT);\n        console.log(`${ok}: TestCarte: IsSorteDemandee: pasAtoutBibitte`);\n    }\n}\n\n// Tester la méthode Carte.isDisabled(cartes, sorteDemandee, atout)\nexport class IsDisabled {\n    constructor() {\n        this.paquet = new Paquet(true);\n    }\n\n    runAll() {\n        this.sorteDemandee();\n        this.autreSorteADemandee();\n        this.autreSorteAPasDemandee();\n        this.atoutDemandeBibitte();\n        this.atoutPasDemandeBibitte();\n        this.pasSorteDemandee();\n    }\n\n    // Carte de la sorte demandee\n    sorteDemandee() {\n        const carte = this.paquet.getCarte(8, Sorte.PIQUE);\n        const cartes = [carte, this.paquet.getCarte(8, Sorte.COEUR), this.paquet.getCarte(10, Sorte.PIQUE)];\n\n        const ok = !carte.isDisabled(cartes, Sorte.PIQUE, Sorte.COEUR);\n        console.log(`${ok}: TestCarte: IsDisabled: sorteDemandee`);\n    }\n\n    // Carte pas de la sorte demandee et a la sorte demandee\n    autreSorteADemandee() {\n        const carte = this.paquet.getCarte(8, Sorte.PIQUE);\n        const cartes = [carte, this.paquet.getCarte(8, Sorte.PIQUE), this.paquet.getCarte(10, Sorte.TREFLE)];\n\n        const ok = carte.isDisabled(cartes, Sorte.TREFLE, Sorte.COEUR);\n        console.log(`${ok}: TestCarte: IsDisabled: autreSorteADemandee`);\n    }\n\n    // Carte pas de la sorte demandee et n'a pas la sorte demandee\n    autreSorteAPasDemandee() {\n        const carte = this.paquet.getCarte(8, Sorte.PIQUE);\n        const cartes = [carte, this.paquet.getCarte(8, Sorte.PIQUE), this.paquet.getCarte(10, Sorte.COEUR)];\n\n        const ok = !carte.isDisabled(cartes, Sorte.TREFLE, Sorte.COEUR);\n        console.log(`${ok}: TestCarte: IsDisabled: autreSorteAPasDemandee`);\n    }\n\n    // Bibitte quand atout est demandé\n    atoutDemandeBibitte() {\n        const carte1 = this.paquet.getCarte(15, Sorte.JOKER);\n        const carte2 = this.paquet.getCarte(16, Sorte.BLANCHE);\n        const cartes = [carte1, carte2, this.paquet.getCarte(8, Sorte.COEUR), this.paquet.getCarte(10, Sorte.PIQUE)];\n\n        const ok = !carte1.isDisabled(cartes, Sorte.PIQUE, Sorte.PIQUE) && !carte2.isDisabled(cartes, Sorte.PIQUE, Sorte.PIQUE);;\n        console.log(`${ok}: TestCarte: IsDisabled: atoutDemandeBibitte`);\n    }\n\n    // Bibitte quand atout pas demandé\n    atoutPasDemandeBibitte() {\n        const carte1 = this.paquet.getCarte(15, Sorte.JOKER);\n        const carte2 = this.paquet.getCarte(16, Sorte.BLANCHE);\n        const cartes = [carte1, carte2, this.paquet.getCarte(8, Sorte.COEUR), this.paquet.getCarte(10, Sorte.PIQUE)];\n\n        const ok = carte1.isDisabled(cartes, Sorte.PIQUE, Sorte.COEUR) && carte2.isDisabled(cartes, Sorte.PIQUE, Sorte.COEUR);;\n        console.log(`${ok}: TestCarte: IsDisabled: atoutPasDemandeBibitte`);\n    }\n\n    // Pas de sorte demandée\n    pasSorteDemandee() {\n        const carte = this.paquet.getCarte(8, Sorte.PIQUE);\n        const cartes = [carte, this.paquet.getCarte(8, Sorte.COEUR), this.paquet.getCarte(10, Sorte.PIQUE)];\n\n        const ok = !carte.isDisabled(cartes, null, Sorte.COEUR);\n        console.log(`${ok}: TestCarte: IsDisabled: pasSorteDemandee`);\n    }\n\n    // Bibittes sans atout\n    pasAtoutBibitte() {\n        const carte1 = this.paquet.getCarte(15, Sorte.JOKER);\n        const carte2 = this.paquet.getCarte(16, Sorte.BLANCHE);\n\n        const ok = !carte1.isAtout(Sorte.SANS_ATOUT) && !carte2.isAtout(Sorte.SANS_ATOUT);\n        console.log(`${ok}: TestCarte: IsDisabled: pasAtoutBibitte`);\n    }\n}\n\n    // Tester la méthode Carte.setFromPoids(poids, sorte)\nexport class SetFromPoids {\n    constructor() {}\n\n    runAll() {\n        this.basic();\n    }\n\n    // Test de base\n    basic() {\n        const carte = new Carte();\n        carte.setFromPoids(11, Sorte.TREFLE);\n\n        const ok = carte.key === 'J|trèfle' && carte.rang === 28 && carte.couleur === Couleur.NOIR;\n        console.log(`${ok}: TestCarte: SetFromPoids: basic`);\n    }\n}","/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/tests/test-meilleure-carte/test-meilleure-carte.js",[],[],"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/components/carte-component.js",[],[],"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/tests/test-meilleure-carte/test-get-main1-carte1.js",[],[],"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/tests/test-meilleure-carte/test-getCarte4.js",[],[],"/Users/eli.leblanc/Documents/Eli/repos/beu-split/my-app/src/tests/test-meilleure-carte/test-isCarteMaitre.js",["141"],[],"import { Sorte } from \"../../models/carte\";\nimport { MeilleureCarte } from \"../../models/meilleure-carte\";\nimport { Paquet } from \"../../models/paquet\";\n\nexport class IsCarteMaitre {\n    constructor() {\n     }\n\n    runAll() {\n        this.maitreAbsolu();\n        this.maitre();\n        this.pasMaitre();\n        this.maitreAbsoluAtout();\n        this.maitreAtout();\n        this.pasMaitreAtout();\n    }\n\n    // La carte est maître absolue\n    maitreAbsolu(){\n        const paquet = new Paquet(true);\n        paquet.pile = [paquet.getCarte(14, Sorte.TREFLE)];\n        const cartes = [\n            paquet.getCarte(14, Sorte.PIQUE),\n            paquet.getCarte(13, Sorte.PIQUE),\n            paquet.getCarte(12, Sorte.PIQUE),\n            paquet.getCarte(13, Sorte.COEUR),\n            paquet.getCarte(7, Sorte.CARREAU),\n            paquet.getCarte(14, Sorte.TREFLE),\n            paquet.getCarte(7, Sorte.TREFLE),\n            paquet.getCarte(13, Sorte.TREFLE)\n        ]\n        const atout = Sorte.PIQUE;\n        const meilleure = new MeilleureCarte();\n        const ok = meilleure.isCarteMaitre(paquet.getCarte(13, Sorte.TREFLE), cartes, paquet.pile, atout);\n        console.log(`${ok}: TestMeilleureCarte: isCarteMaitre: maitreAbsolu`);\n    }    \n\n    // La carte est bonne, mais pas la meilleure dans mon jeu\n    maitre(){\n        const paquet = new Paquet(true);\n        paquet.pile = [paquet.getCarte(14, Sorte.TREFLE)];\n        const cartes = [\n            paquet.getCarte(14, Sorte.PIQUE),\n            paquet.getCarte(13, Sorte.PIQUE),\n            paquet.getCarte(12, Sorte.PIQUE),\n            paquet.getCarte(13, Sorte.COEUR),\n            paquet.getCarte(7, Sorte.CARREAU),\n            paquet.getCarte(14, Sorte.TREFLE),\n            paquet.getCarte(12, Sorte.TREFLE),\n            paquet.getCarte(13, Sorte.TREFLE)\n        ]\n        const atout = Sorte.PIQUE;\n        const meilleure = new MeilleureCarte();\n        const ok = meilleure.isCarteMaitre(paquet.getCarte(12, Sorte.TREFLE), cartes, paquet.pile, atout);\n        console.log(`${ok}: TestMeilleureCarte: isCarteMaitre: maitre`);\n    }     \n\n    // La carte n'est pas maître\n    pasMaitre(){\n        const paquet = new Paquet(true);\n        paquet.pile = [paquet.getCarte(12, Sorte.TREFLE)];\n        const cartes = [\n            paquet.getCarte(14, Sorte.PIQUE),\n            paquet.getCarte(13, Sorte.PIQUE),\n            paquet.getCarte(12, Sorte.PIQUE),\n            paquet.getCarte(13, Sorte.COEUR),\n            paquet.getCarte(7, Sorte.CARREAU),\n            paquet.getCarte(10, Sorte.TREFLE),\n            paquet.getCarte(7, Sorte.TREFLE),\n            paquet.getCarte(13, Sorte.TREFLE)\n        ]\n        const atout = Sorte.PIQUE;\n        const meilleure = new MeilleureCarte();\n        const ok = !meilleure.isCarteMaitre(paquet.getCarte(13, Sorte.TREFLE), cartes, paquet.pile, atout);\n        console.log(`${ok}: TestMeilleureCarte: isCarteMaitre: pasMaitre`);\n    }\n\n    // La carte est maître absolue en atout\n    maitreAbsoluAtout(){\n        const paquet = new Paquet(true);\n        paquet.pile = [paquet.getCarte(14, Sorte.TREFLE)];\n        const cartes = [\n            paquet.getCarte(14, Sorte.PIQUE),\n            paquet.getCarte(13, Sorte.PIQUE),\n            paquet.getCarte(12, Sorte.PIQUE),\n            paquet.getCarte(13, Sorte.COEUR),\n            paquet.getCarte(7, Sorte.CARREAU),\n            paquet.getCarte(14, Sorte.TREFLE),\n            paquet.getCarte(7, Sorte.TREFLE),\n            paquet.getCarte(16, Sorte.BLANCHE)\n        ]\n        const atout = Sorte.TREFLE;\n        const meilleure = new MeilleureCarte();\n        const ok = meilleure.isCarteMaitre(paquet.getCarte(16, Sorte.BLANCHE), cartes, paquet.pile, atout);\n        console.log(`${ok}: TestMeilleureCarte: isCarteMaitre: maitreAbsoluAtout`);\n    }    \n\n    // La carte est bonne, mais pas la meilleure dans mon jeu, en atout\n    maitreAtout(){\n        const paquet = new Paquet(true);\n        paquet.pile = [paquet.getCarte(14, Sorte.TREFLE)];\n        const cartes = [\n            paquet.getCarte(14, Sorte.PIQUE),\n            paquet.getCarte(13, Sorte.PIQUE),\n            paquet.getCarte(12, Sorte.PIQUE),\n            paquet.getCarte(13, Sorte.COEUR),\n            paquet.getCarte(7, Sorte.CARREAU),\n            paquet.getCarte(14, Sorte.TREFLE),\n            paquet.getCarte(15, Sorte.JOKER),\n            paquet.getCarte(16, Sorte.BLANCHE)\n        ]\n        const atout = Sorte.PIQUE;\n        const meilleure = new MeilleureCarte();\n        const ok = meilleure.isCarteMaitre(paquet.getCarte(15, Sorte.JOKER), cartes, paquet.pile, atout);\n        console.log(`${ok}: TestMeilleureCarte: isCarteMaitre: maitreAtout`);\n    }     \n\n    // La carte n'est pas maître, en atout\n    pasMaitreAtout(){\n        const paquet = new Paquet(true);\n        paquet.pile = [paquet.getCarte(12, Sorte.TREFLE)];\n        const cartes = [\n            paquet.getCarte(14, Sorte.PIQUE),\n            paquet.getCarte(13, Sorte.PIQUE),\n            paquet.getCarte(12, Sorte.PIQUE),\n            paquet.getCarte(13, Sorte.COEUR),\n            paquet.getCarte(7, Sorte.CARREAU),\n            paquet.getCarte(10, Sorte.TREFLE),\n            paquet.getCarte(14, Sorte.TREFLE),\n            paquet.getCarte(13, Sorte.TREFLE)\n        ]\n        const atout = Sorte.TREFLE;\n        const meilleure = new MeilleureCarte();\n        const ok = !meilleure.isCarteMaitre(paquet.getCarte(14, Sorte.TREFLE), cartes, paquet.pile, atout);\n        console.log(`${ok}: TestMeilleureCarte: isCarteMaitre: pasMaitreAtout`);\n    }  \n}",{"ruleId":"142","severity":1,"message":"143","line":283,"column":19,"nodeType":"144","messageId":"145","endLine":283,"endColumn":23},{"ruleId":"142","severity":1,"message":"146","line":1,"column":17,"nodeType":"144","messageId":"145","endLine":1,"endColumn":22},{"ruleId":"147","severity":1,"message":"148","line":19,"column":5,"nodeType":"149","messageId":"150","endLine":20,"endColumn":6},{"ruleId":"142","severity":1,"message":"151","line":160,"column":27,"nodeType":"144","messageId":"145","endLine":160,"endColumn":33},{"ruleId":"147","severity":1,"message":"148","line":342,"column":5,"nodeType":"149","messageId":"150","endLine":342,"endColumn":21},{"ruleId":"147","severity":1,"message":"148","line":6,"column":5,"nodeType":"149","messageId":"150","endLine":7,"endColumn":7},"no-unused-vars","'lead' is assigned a value but never used.","Identifier","unusedVar","'Sorte' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'maitre' is assigned a value but never used."]